#!/bin/sh

# This script downloads custom files from the feed Web server

# --- !! Auto-generated by build.sh !! ---
# --- !! Do not edit manually. Distribute this file for official firmware users !! ---

# Base URL for downloading files (will be replaced by build.sh)
BASE_DOWNLOAD_URL="__BASE_DOWNLOAD_URL__"
# Log tag for this script
LOG_TAG="uci-defaults-custom-dl"

logger -t $LOG_TAG "Starting custom files download script."

# Check if wget or curl is available
DOWNLOAD_CMD=""
if command -v wget >/dev/null 2>&1; then
    DOWNLOAD_CMD="wget"
elif command -v curl >/dev/null 2>&1; then
    DOWNLOAD_CMD="curl"
else
    logger -t $LOG_TAG "Error: wget or curl command not found. Cannot download custom files."
    logger -t $LOG_TAG "Please ensure your firmware includes the wget or curl package."
    exit 0 # gracefully exit if no download tool
fi

# File list: Each entry is "source_filename::destination_path[::permissions]"
# source_filename is relative to BASE_DOWNLOAD_URL
# destination_path is the absolute path on the device
# permissions is optional (e.g., 755 for executable). If empty, no chmod is performed.
# This list will be embedded by the build script
CUSTOM_FILE_LIST=(
# __CUSTOM_FILE_LIST__ is a placeholder for the list defined in build.sh
__CUSTOM_FILE_LIST__
)

# Loop through the file list and download each file
for FILE_ENTRY in "${CUSTOM_FILE_LIST[@]}"; do
    # Parse the file entry string
    SOURCE_FILENAME="${FILE_ENTRY%%::*}" # Extract part before first ::
    # Check if :: separator exists
    if [ "$SOURCE_FILENAME" = "$FILE_ENTRY" ]; then
        logger -t $LOG_TAG "Warning: Invalid file list entry format (missing '::'): '$FILE_ENTRY'. Skipping."
        continue
    fi

    REST="${FILE_ENTRY#*::}" # Extract part after first ::

    # Extract destination path (part before second ::)
    DEST_PATH="${REST%%::*}"
     # Check if :: separator exists in REST (meaning permissions might be present)
    if [ "$DEST_PATH" = "$REST" ]; then
       # No second :: found, permissions are not specified
       PERMISSIONS=""
    else
       # Second :: found, extract permissions
       PERMISSIONS="${REST#*::}"
    fi


    # Check if source filename and destination path were successfully parsed
    if [ -z "$SOURCE_FILENAME" ] || [ -z "$DEST_PATH" ]; then
        logger -t $LOG_TAG "Warning: Invalid file list entry format (empty source or dest): '$FILE_ENTRY'. Skipping."
        continue # Skip to next file
    fi

    # Construct the full download URL
    FULL_DOWNLOAD_URL="$BASE_DOWNLOAD_URL/$SOURCE_FILENAME"
    # Extract the destination directory
    DEST_DIR="$(dirname "$DEST_PATH")"
    # Extract the destination filename (not strictly needed for download, but useful for logs/temp file naming)
    FILENAME="$(basename "$DEST_PATH")"

    logger -t $LOG_TAG "Processing file: $SOURCE_FILENAME -> $DEST_PATH"

    # Check if file already exists at destination
    # Note: This is a simple check. More complex logic might be needed if you want to update existing files.
    if [ -f "$DEST_PATH" ]; then
        logger -t $LOG_TAG "File already exists at $DEST_PATH. Skipping download."
        continue # Skip to next file
    fi

    # Create destination directory if needed
    mkdir -p "$DEST_DIR"

    # Temporary path during download
    TMP_PATH="${DEST_PATH}.tmp"

    # Perform download using the determined command
    if [ "$DOWNLOAD_CMD" = "wget" ]; then
        "$DOWNLOAD_CMD" -O "$TMP_PATH" "$FULL_DOWNLOAD_URL"
    elif [ "$DOWNLOAD_CMD" = "curl" ]; then
        "$DOWNLOAD_CMD" -o "$TMP_PATH" "$FULL_DOWNLOAD_URL"
    fi

    # Check download success and move to final destination
    if [ -f "$TMP_PATH" ]; then
        mv "$TMP_PATH" "$DEST_PATH"
        # Check if move was successful
        if [ $? -eq 0 ]; then
            logger -t $LOG_TAG "Successfully downloaded $SOURCE_FILENAME to $DEST_PATH."

            # Set permissions if specified in the file entry
            if [ -n "$PERMISSIONS" ]; then
                chmod "$PERMISSIONS" "$DEST_PATH"
                logger -t $LOG_TAG "Set permissions to $PERMISSIONS for $DEST_PATH."
            fi
        else
             logger -t $LOG_TAG "Error: Failed to move downloaded file from $TMP_PATH to $DEST_PATH."
        fi

    else
        logger -t $LOG_TAG "Error: Failed to download $SOURCE_FILENAME from $FULL_DOWNLOAD_URL."
        logger -t $LOG_TAG "Please check network connection, URL, and Web server."
    fi
done

logger -t $LOG_TAG "Custom files download script finished."

exit 0
