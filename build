#!/bin/bash
# Note: install -m 644/755 is used only in patch_device_files to preserve expected permissions.
set -e

START_TIME=$(date +%s)
BUILD_DIR="$HOME/Downloads/openwrt-24.10"
OUTPUT_BASE="$HOME/Downloads/firmware"
CONFIG_DIR="$HOME/Downloads/configs"
BACKUP_DIR="$HOME/Downloads/backup"
LOCAL_FEED_DIR="$HOME/Downloads/package"
FEED_NAME="mypackages"
KERNEL_VERSION="6.6.86-1"
ORIGIN_URL="downloads.openwrt.org/releases"

MYFEED_URL=""
DEVICE=""
OUTPUT_DIR=""
ARCH_PACKAGES=""
TARGET=""
SUBTARGET=""
GIT_TAG=""
IPADDR=""

BACKUP_LIST=(
	./include/kernel-defaults.mk
	./package/base-files/files/bin/config_generate
	./feeds.conf.default
)

restore_original_files() {
	echo "🔁 Restoring original files..."
	for file in "${BACKUP_LIST[@]}"; do
		base_name=$(basename "$file")
		[ -f "$BACKUP_DIR/$base_name" ] && cp "$BACKUP_DIR/$base_name" "$file"
	done
}

backup_original_files() {
	echo "📦 Backing up original files..."
	mkdir -p "$BACKUP_DIR"
	for file in "${BACKUP_LIST[@]}"; do
		base_name=$(basename "$file")
		[ -f "$file" ] && cp "$file" "$BACKUP_DIR/$base_name"
	done
}

set_vermagic_key() {
	VERMAGIC_KEY=$(echo "$DEVICE" | awk -F. '{print $NF}')
}

patch_device_files() {
	echo "🧩 Applying all patch files for $DEVICE..."
 
	install -m 644 "$CONFIG_DIR/config.$DEVICE" ./.config
	install -m 644 "$CONFIG_DIR/vermagic.$VERMAGIC_KEY" ./vermagic
	install -m 755 "$CONFIG_DIR/config_generate.$DEVICE" ./package/base-files/files/bin/config_generate
	install -m 644 "$CONFIG_DIR/kernel-defaults.mk" ./include/kernel-defaults.mk
}

update_local_feeds() {
	echo "🔄 Updating local packages in $LOCAL_FEED_DIR..."

	for dir in "$LOCAL_FEED_DIR"/*; do
		if [ -d "$dir/.git" ]; then
			echo "➡️  Pulling updates in $(basename "$dir") ..."
			git -C "$dir" pull --ff-only || echo "⚠️  Failed to update $(basename "$dir")"
		fi
	done
}

setup_local_feed() {
	echo "📦 Setting up local feed..."
 
	if ! grep -q "src-link $FEED_NAME" feeds.conf.default; then
		echo "src-link $FEED_NAME $LOCAL_FEED_DIR" >> feeds.conf.default
		echo "✅ Added feed: $FEED_NAME"
	else
		echo "ℹ️ Local feed $FEED_NAME already exists in feeds.conf.default"
	fi
 
	./scripts/feeds update -a
	./scripts/feeds install -a
}

select_device() {
	local base_device
	base_device=$(whiptail --title "Select Device" --menu "Choose a device to build:" 15 50 3 \
		"mx5300" "Linksys MX5300 (IPQ807x)" \
		"whw03v2" "Linksys WHW03 v2 (IPQ40xx)" \
		3>&1 1>&2 2>&3) || exit 1
  
	case "$base_device" in
		mx5300)
			DEVICE="mx5300"
			MYFEED_URL="feeds.onenas.fun"
			;;

		whw03v2)
			local sub_scene
			sub_scene=$(whiptail --title "WHW03V2 Configuration" --menu "Select deployment profile:" 12 50 2 \
				"home"   "Home Enviroment" \
				"office" "Office Enviroment" \
				3>&1 1>&2 2>&3) || exit 1

			DEVICE="$sub_scene.whw03v2"
			if [ "$sub_scene" = "home" ]; then
				MYFEED_URL="feeds.onenas.fun"
			else
				MYFEED_URL="feeds.sh-mtgc.com"
			fi
			;;

		*)
			echo "Invalid selection"
			exit 1
			;;
	esac
}

clean_source_tree() {
	echo "🧹 Cleaning up old build artifacts..."
	if [ -f "$BUILD_DIR/Makefile" ]; then
		cd "$BUILD_DIR" || exit 1
		make clean
	else
		echo "❌ Makefile not found in $BUILD_DIR, cannot clean!"
		exit 1
	fi
}

make_output_folder() {
	echo "📁 Making output folder..."
	DATE_TAG=$(date +"%Y%m%d_%H%M")
	OUTPUT_DIR="$OUTPUT_BASE/$DEVICE/$DATE_TAG"
	mkdir -p "$OUTPUT_DIR"

	LINK_PATH="$OUTPUT_BASE/$DEVICE/latest"
	ln -sfn "$DATE_TAG" "$LINK_PATH"

	if [ -L "$LINK_PATH" ]; then
		echo "🔗 'latest' symlink created → $LINK_PATH → $DATE_TAG"
	else
		echo "❌ Failed to create 'latest' symlink at $LINK_PATH"
	fi
}

prepare_config() {
	echo "📦 Setting ROOTFS output dir..."
	sed -i "/^CONFIG_TARGET_ROOTFS_DIR=.*/d" .config
	echo "CONFIG_TARGET_ROOTFS_DIR=\"$OUTPUT_DIR\"" >> .config
}

make_deconfig() {
	echo "⚙️ Running make defconfig..."
	make defconfig || {
		echo "❌ make defconfig failed!"
		exit 1
	}
}

detect_target_info() {
	echo "🔍 Detecting target info..."
	local config_file=".config"

	TARGET=$(grep -oP '^CONFIG_TARGET_BOARD="\K[^"]+' "$config_file")
	SUBTARGET=$(grep -oP '^CONFIG_TARGET_SUBTARGET="\K[^"]+' "$config_file")
	ARCH_PACKAGES=$(grep -oP '^CONFIG_TARGET_ARCH_PACKAGES="\K[^"]+' "$config_file")
	GIT_TAG=$(git describe --tags --always 2>/dev/null || echo "unknown")
	IPADDR=$(grep -oP 'lan\)\s+ipad=\$\{ipaddr:-"\K[^"]+' package/base-files/files/bin/config_generate | head -n1)


	if [[ -z "$TARGET" || -z "$SUBTARGET" || -z "$ARCH_PACKAGES" ]]; then
		echo "❌ Failed to detect TARGET, SUBTARGET, or ARCH_PACKAGES"
		exit 1
	fi
 
	echo "📦 GIT TAG=$GIT_TAG TARGET=$TARGET | SUBTARGET=$SUBTARGET | ARCH=$ARCH_PACKAGES | IP=$IPADDR"
}

generate_customfeeds_conf() {
	echo "📝 Generating customfeeds.conf for $DEVICE..."
	local ABI_HASH=$(cat ./vermagic)

	if [ -z "$ABI_HASH" ]; then
		echo "❌ Error: Can not get ABI-hash from ./vermagic !"
		echo "   This should after patch_device_files , make sure ./vermagic exists and not empty..."

		exit 1
	fi
	local KMODS_URL="https://$ORIGIN_URL/$GIT_TAG/targets/$TARGET/$SUBTARGET/kmods/$KERNEL_VERSION-$ABI_HASH"

	cat > package/system/opkg/files/customfeeds.conf <<EOF
src/gz my_kmod https://$MYFEED_URL/$DEVICE/latest/targets/packages
src/gz my_packages https://$MYFEED_URL/$DEVICE/latest/packages/mypackages
src/gz openwrt_kmods $KMODS_URL

EOF
	echo "✅ Created customfeeds.conf,"
	echo "   kmods source is: $KMODS_URL"
	sleep 5
}

generate_distfeeds_conf() {
	echo "📝 Creating package/system/opkg/files/distfeeds.conf file..."
	local distfeeds_file="package/system/opkg/files/distfeeds.conf"

	mkdir -p $(dirname "$distfeeds_file")

	cat > "$distfeeds_file" <<EOF
src/gz openwrt_core https://$ORIGIN_URL/$GIT_TAG/targets/$TARGET/$SUBTARGET/packages
src/gz openwrt_base https://$ORIGIN_URL/$GIT_TAG/packages/$ARCH_PACKAGES/base
src/gz openwrt_luci https://$ORIGIN_URL/$GIT_TAG/packages/$ARCH_PACKAGES/luci
src/gz openwrt_packages https://$ORIGIN_URL/$GIT_TAG/packages/$ARCH_PACKAGES/packages
src/gz openwrt_routing https://$ORIGIN_URL/$GIT_TAG/packages/$ARCH_PACKAGES/routing
src/gz openwrt_telephony https://$ORIGIN_URL/$GIT_TAG/packages/$ARCH_PACKAGES/telephony

EOF
	echo "✅ Created $distfeeds_file , only include original Feed source"
	echo "ℹ️  This will cover OpenWrt default distfeeds.conf"
	sleep 5
}

target_summary() {
	echo ""
	echo "✅ To build firmware for: $DEVICE"
	echo "📁 Firmware will save to: $OUTPUT_DIR"
	echo "📦 Target:                $TARGET"
	echo "📦 Subtarget:             $SUBTARGET"
	echo "📦 Packages arch:         $ARCH_PACKAGES"
	echo "🌐 Default IP:            $IPADDR"
	echo "🔖 Git Tag:               $GIT_TAG"
	echo ""
	sleep 2
}

build_firmware() {
	echo "⚙️ Starting build for $DEVICE..."

	make download -j$(nproc)
	if ! make V=s -j$(nproc); then
		echo "⚠️ Multithread build failed. Retrying with single thread..."
		make V=s -j1
	fi
}

copy_all_output() {
	echo "📤 Copying firmware and packages..."
	rsync -a bin/targets/"$TARGET"/"$SUBTARGET"/ "$OUTPUT_DIR/targets/"
	rsync -a bin/packages/"$ARCH_PACKAGES"/ "$OUTPUT_DIR/packages/"
}

final_summary() {
	echo ""
	echo "✅ Build completed for $DEVICE"
	echo "📁 Firmware saved to:  $OUTPUT_DIR"
	echo "📦 Target:             $TARGET"
	echo "📦 Subtarget:          $SUBTARGET"
	echo "📦 Packages arch:      $ARCH_PACKAGES"
	echo "🌐 Default IP:         $IPADDR"
	echo "🌐 Feed Source:        $MYFEED_URL"
	echo "🔖 Git Tag:            $GIT_TAG"
	echo ""

	local END_TIME=$(date +%s)
	local DURATION=$((END_TIME - START_TIME))
	local HOURS=$((DURATION / 3600))
	local MINUTES=$(( (DURATION % 3600) / 60 ))
	local SECONDS=$((DURATION % 60))
	local DURATION_STRING=""

	if [ "$HOURS" -gt 0 ]; then
		DURATION_STRING+="${HOURS}h "
	fi

        if [ "$MINUTES" -gt 0 ] || [ "$HOURS" -gt 0 ]; then
		DURATION_STRING+="${MINUTES}m "
	fi

	if [ "$HOURS" -gt 0 ] || [ "$MINUTES" -gt 0 ] || [ "$SECONDS" -gt 0 ]; then
		DURATION_STRING+="${SECONDS}s"
	fi

	DURATION_STRING=$(echo "$DURATION_STRING" | sed 's/ $//')
	if [ -z "$DURATION_STRING" ]; then
		DURATION_STRING="0s"
	fi

	local FINISH_TIME_CST=$(TZ='Asia/Shanghai' date --date="@$END_TIME" +'%Y-%m-%d %H:%M:%S %Z')

	echo "⏰ Build finished at:  $FINISH_TIME_CST"
	echo "⏱️ Total duration:     $DURATION_STRING"
	echo ""
}

main() {
	cd "$BUILD_DIR"
	trap restore_original_files EXIT

	select_device
	set_vermagic_key
	backup_original_files
	clean_source_tree
	update_local_feeds
	patch_device_files
	setup_local_feed
	make_output_folder
	prepare_config
	make_deconfig
	detect_target_info
	generate_distfeeds_conf
	generate_customfeeds_conf
	target_summary
	build_firmware
	final_summary
	copy_all_output
}

main "$@"
